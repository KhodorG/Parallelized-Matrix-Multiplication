#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1000

int A[N][N], B[N][N], C[N][N];

int main() {
    int num_threads = 4;

    // Initialize matrices A and B with random values
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            A[i][j] = rand() % 100;
            B[i][j] = rand() % 100;
        }
    }

    // Multiply matrices A and B using OpenMP parallelization
    double start_time = omp_get_wtime();
    #pragma omp parallel num_threads(num_threads)
    {
        int tid = omp_get_thread_num();
        int start = tid * N / num_threads;
        int end = (tid + 1) * N / num_threads;

        for (int i = start; i < end; i++) {
            for (int j = 0; j < N; j++) {
                C[i][j] = 0;
                for (int k = 0; k < N; k++) {
                    C[i][j] += A[i][k] * B[k][j];
                }
            }
        }
    }
    double end_time = omp_get_wtime();

    // Print the resulting matrix C
    printf("Matrix C:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    // Print the execution time
    double total_time = end_time - start_time;
    printf("Execution time: %f ms\n", total_time * 1000);

    return 0;
}
