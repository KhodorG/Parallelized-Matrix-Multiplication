#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define N 1000

int A[N][N], B[N][N], C[N][N];
int num_threads = 4;

void *matrix_multiply(void *arg) {
    int tid = *(int *) arg;
    int start = tid * N / num_threads;
    int end = (tid + 1) * N / num_threads;

    for (int i = start; i < end; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return NULL;
}

int main() {
    // Initialize matrices A and B with random values
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            A[i][j] = rand() % 100;
            B[i][j] = rand() % 100;
        }
    }

    // Create and join threads, measuring the execution time
    clock_t start_time = clock();
    pthread_t threads[num_threads];
    int thread_args[num_threads];

    for (int i = 0; i < num_threads; i++) {
        thread_args[i] = i;
        pthread_create(&threads[i], NULL, matrix_multiply, &thread_args[i]);
    }

    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    clock_t end_time = clock();

    // Print the resulting matrix C
    printf("Matrix C:\n");
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    // Print the execution time in milliseconds
    double total_time = ((double) (end_time - start_time)) / CLOCKS_PER_SEC;
    printf("Execution time: %f ms\n", total_time * 1000);

    return 0;
}
